console.log('1');
setTimeout(function() {
    console.log('2')
}, 0);
Promise.resolve().then( () => console.log('3') );
console.log('4');

// Два вопроса:
// 1. В каком порядке выведутся цифры ?
// Ответ: 1, 4, 3, 2


// 2. Почему они выведутся именно так
// Дать на второй вопрос развернутый ответ с комментарием для каждой операции.
// Ответ: 1 выводится синхронно и моментально в консоль. Это первая в очереди команда.
// Далее setTimeout помещает колбэк (функцию, которая выводит 2) в очередь. Несмотря на то, что задержка составляет 0 миллисекунд, выполнение колбэка не происходит сразу после текущего блока кода, а ожидает, пока стек вызовов будет пуст, и только после этого колбэк может быть помещен в стек вызовов для выполнения.
// После следует Promise.resolve().then( () => console.log('3') ); в состоянии "Успешно". Метод then добавляет колбэк, который должен выполниться после успешного выполнения промиса. Колбэки промисов попадают в очередь микрозадач, которая имеет более высокий приоритет выполнения, чем очередь макрозадач (где находится колбэк из setTimeout).
// 4 аналогична команде вывода 1. После выполнения синхронного кода, движок JavaScript проверяет очередь микрозадач перед тем, как перейти к следующему циклу событий и выполнить макрозадачи. В очереди микрозадач находится колбэк промиса, который выводит 3. Поэтому 3 выводится перед 2. Только после того, как очередь микрозадач будет опустошена, движок проверяет очередь макрозадач, где ожидает колбэк setTimeout, который выводит 2.